// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package users_test is a generated GoMock package.
package users_test

import (
	context "context"
	reflect "reflect"

	client "github.com/Meat-Hook/back-template/internal/modules/user/client"
	gomock "github.com/golang/mock/gomock"
)

// MockuserSvc is a mock of userSvc interface
type MockuserSvc struct {
	ctrl     *gomock.Controller
	recorder *MockuserSvcMockRecorder
}

// MockuserSvcMockRecorder is the mock recorder for MockuserSvc
type MockuserSvcMockRecorder struct {
	mock *MockuserSvc
}

// NewMockuserSvc creates a new mock instance
func NewMockuserSvc(ctrl *gomock.Controller) *MockuserSvc {
	mock := &MockuserSvc{ctrl: ctrl}
	mock.recorder = &MockuserSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockuserSvc) EXPECT() *MockuserSvcMockRecorder {
	return m.recorder
}

// Access mocks base method
func (m *MockuserSvc) Access(ctx context.Context, email, pass string) (*client.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access", ctx, email, pass)
	ret0, _ := ret[0].(*client.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Access indicates an expected call of Access
func (mr *MockuserSvcMockRecorder) Access(ctx, email, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockuserSvc)(nil).Access), ctx, email, pass)
}
