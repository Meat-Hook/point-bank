// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/api/rpc/pb/user.pb.go

// Package client_test is a generated GoMock package.
package client_test

import (
	context "context"
	reflect "reflect"

	pb "github.com/Meat-Hook/back-template/internal/modules/user/internal/api/rpc/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserClient is a mock of UserClient interface
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// Access mocks base method
func (m *MockUserClient) Access(ctx context.Context, in *pb.RequestAccess, opts ...grpc.CallOption) (*pb.UserInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Access", varargs...)
	ret0, _ := ret[0].(*pb.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Access indicates an expected call of Access
func (mr *MockUserClientMockRecorder) Access(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockUserClient)(nil).Access), varargs...)
}

// MockUserServer is a mock of UserServer interface
type MockUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServerMockRecorder
}

// MockUserServerMockRecorder is the mock recorder for MockUserServer
type MockUserServerMockRecorder struct {
	mock *MockUserServer
}

// NewMockUserServer creates a new mock instance
func NewMockUserServer(ctrl *gomock.Controller) *MockUserServer {
	mock := &MockUserServer{ctrl: ctrl}
	mock.recorder = &MockUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserServer) EXPECT() *MockUserServerMockRecorder {
	return m.recorder
}

// Access mocks base method
func (m *MockUserServer) Access(arg0 context.Context, arg1 *pb.RequestAccess) (*pb.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access", arg0, arg1)
	ret0, _ := ret[0].(*pb.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Access indicates an expected call of Access
func (mr *MockUserServerMockRecorder) Access(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockUserServer)(nil).Access), arg0, arg1)
}
